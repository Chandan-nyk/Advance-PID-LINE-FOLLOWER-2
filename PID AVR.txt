/* Programmed by
* ChaNdan Kumar Nayak,
* SVNIT, Surat
/

#include <avr/io.h>
#ifndef F_CPU
#define F_CPU 12000000UL
#endif


#include <util/delay.h>

#include <avr/interrupt.h>
#include <inttypes.h>

# warning “In this PID, Parabolic is used rather Proportional, which performance seems much smooth and less overshooting”

#define del(x) _delay_ms(x)                                                                                        // What lazy knows, intellect doesn’t know. Defining shorthand to create delay
#define black(x) (x>900)                                                                                                // if Light sensors smell black, their ADC is higher than 900

uint16_t readadc(uint8_t);                                                                                            // Prototyping
void motorleft (int);
void motorright (int);

 

int main()
{
int err=0, prev_err=0, curr_err=0 ,diff=0, pwm=0, intr=0;                                              // Declaration of error variables and PWM
uint16_t _0,_1,_2,_3,_4,_5,_6;                                                                                         // Declaration of ADC variables
// [In C, underscore(s) followed by number is equally legitimate]

const int kp=9;                                                                                                                      // Declaration of Proportionality Constant
const int kd=10;                                                                                                                    // Declaration of Differential Constant
const int ki=1;                                                                                                                       // Declaration of Intergral Constant

int sample=0;                                                                                                                       // Declaration of sample variable

DDRC=0X0F;                                                                                                                      // Lower Nibble as output of motor
DDRD=0XFF;                                                                                                                       // parallel LED indicator about error and PWM

ADMUX=(1<<REFS0) ;                                                                                                       // AVCC WITH EXTERNAL CAPACITOR AT AREF
ADCSRA=(1<<ADEN) ;                                                                                                      // ADC ENABLED to free running mode

TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);                                        // initializig Timer/Counter Control Register
TCCR1B |= (1<<CS10)| _BV(WGM12) ;                                                                         // COM setting sets OC1A/OC1B on compare match
// WGM sets in 8 bit fast PWM at no prescaling

while(1)
{
_0=readadc(0×00);                                                                                              // Reading the value of seven sensors and assigning into corresponding variable
_1=readadc(0×01);
_2=readadc(0×02);
_3=readadc(0×03);
_4=readadc(0×04);
_5=readadc(0×05);
_6=readadc(0×06);
if (black(_0)) err=3 , PORTC=0X06;                                                                    // Defining errors according to the priority of sensors
else if (black(_6)) err=-3, PORTC=0X09;                                                           // [ On top-bottom flow of else-if ladder, if a condition becomes TRUE, the
else if (black(_1)) err=2;                                                                                        // portion of ladder following the TRUE statement is skipped]
else if (black(_5)) err=-2;
else if (black(_2)) err=1;
else if (black(_4)) err=-1;
else if (black(_3)) err=0, intr=0 ;                                                                                 // If no error occur, integral term is re-initialized to 0

if (err*err <9) PORTC=0X0A;                                                                                      // if |error| is less than 3 simple turning of motor occur
PORTD&=0XF0;                                                                                                           // PD4 and PD5 are LED indicators of PWM (OC1A,OC1B)
PORTD|=err*err;                                                                                                          // The lower Nibble indicate the Square of error

prev_err=curr_err;
curr_err=err;
diff=curr_err-prev_err;                                                                                               // Calculating Differential Error

if (sample==100) intr+=err,sample=0; sample++;                                              // Defining Sample period for integration

if (intr>10) intr=10;                                                                                                      // Limiting the maximum value of integral term to be within 10
if (intr<-10) intr=-10;

if (err<0)
pwm=-kp*curr_err*curr_err +kd*diff + ki*intr;                                                         // Two statements are required to set suitable sign to Parabolic term
else                                                                                                                                // according to the sign of error that sensor attains
pwm=kp*curr_err*curr_err +kd*diff + ki*intr;

motorleft (225+ pwm);                                                                                               // The base OCRA/B value is 225 and its sum or difference with
motorright(225- pwm);                                                                                               // PWM and base value is the net speed submitted to corresponding motors

}

return 1747;
}

motorleft(int speed)
{
if (speed >255) speed=255;                                                                                          // OCR’s TOP value, below the BOTTOM and above the MAX value of TCNT
else if (speed<0) speed=0;                                                                                            // is meaningless
OCR1A=speed;

}

motorright(int speed)
{
if (speed >255) speed=255;
else if (speed<0) speed=0;
OCR1B=speed;
}
uint16_t readadc(uint8_t ch)
{
ch=ch&0b00000111;                                                                                   // PINA(ch) AS THE ADC channel PIN that
ADMUX|=ch;
ADCSRA|=(1<<ADSC);                                                                              // START CONVERSION
while (!(ADCSRA&(1<<ADIF)));                                                               // ADIF is zero, means Conversion is on progress which sets after completion
ADCSRA|=(1<<ADIF);                                                                                // Resetting ADIF by sending 1 to its positions
ADMUX&=~(0b00000111);                                                                       // Clear MUX0 MUX1 and MUX2 value of ADUMUX which will be occupied
return (ADC);                                                                                               // by bit value of next channel.
}

